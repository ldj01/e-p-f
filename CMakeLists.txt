cmake_minimum_required(VERSION 3.6)

project(espa-product-formatter)
set (${PROJECT_NAME}_VERSION_MAJOR 1)
set (${PROJECT_NAME}_VERSION_MINOR 0)
set (${PROJECT_NAME}_VERSION_PATCH 0)
set (VERSION ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH})

set (PACKAGE ${PROJECT_NAME})

set(CPACK_PACKAGE_VERSION ${VERSION})
set(CPACK_GENERATOR "TGZ")
set(CPACK_SOURCE_GENERATOR "TGZ")
set(CPACK_SOURCE_IGNORE_FILES "/build/;/.git/;/.gz/;~$;${CPACK_SOURCE_IGNORE_FILES}")
include(CPack)

include(FindPkgConfig)

if (XML2INC)
    set (XML_INCLUDES ${XML2INC})
    set (XML_LIBS ${XML2LIB})
else ()
    find_package(LibXml2)
    if (LIBXML2_FOUND)
        set (XML_INCLUDES ${LIBXML2_INCLUDE_DIR})
        set (XML_LIBS ${LIBXML2_LIBRARIES})
    else ()
        set (XML_INCLUDES $ENV{XML2INC})
        set (XML_LIBS $ENV{XML2LIB})
    endif ()
endif ()
set (XML_INCLUDES ${XML_INCLUDES} CACHE PATH "XML2 header file path" FORCE)
set (XML_LIBS ${XML_LIBS} CACHE STRING "XML2 libraries" FORCE)

if (HDFEOS_INC)
    set (HDFEOS_INCLUDES ${HDFEOS_INC})
    set (HDFEOS_LIBS ${HDFEOS_LIB})
else ()
    pkg_check_modules(HDFEOS hdf-eos4)
    if (HDFEOS_FOUND)
        set (HDFEOS_INCLUDES ${HDFEOS_INCLUDE_DIRS})
        set (HDFEOS_LIBS ${HDFEOS_LDFLAGS})
    else ()
        set (HDFEOS_INCLUDES $ENV{HDFEOS_INC})
        set (HDFEOS_LIBS $ENV{HDFEOS_LIB})
    endif ()
endif ()
set (HDFEOS_INCLUDES ${HDFEOS_INCLUDES} CACHE PATH "HDFEOS header file path"
     FORCE)
set (HDFEOS_LIBS ${HDFEOS_LIBS} CACHE STRING "HDFEOS libraries" FORCE)

if (NOT GCTP_INCLUDES)
    set (GCTP_INCLUDES $ENV{HDFEOS_GCTPINC})
endif ()
if (NOT GCTP_LIBS)
    set (GCTP_LIBS "-L$ENV{HDFEOS_GCTPLIB} -lgctp -lm")
endif ()
set (GCTP_INCLUDES ${GCTP_INCLUDES} CACHE PATH "GCTP header file path" FORCE)
set (GCTP_LIBS ${GCTP_LIBS} CACHE STRING "GCTP libraries" FORCE)

if (HDFINC)
    set (HDF4_INCLUDES ${HDFINC})
else ()
    set (HDF4_INCLUDES $ENV{HDFINC})
endif ()
if (HDFLIB)
    set (HDF4_LIBS "-L${HDFLIB} -lmfhdf -ldf -ljpeg -lz -lm")
else ()
    set (HDF4_LIBS "-L$ENV{HDFLIB} -lmfhdf -ldf -ljpeg -lz -lm")
endif ()
set (HDF4_INCLUDES ${HDF4_INCLUDES} CACHE PATH "HDF 4 header file path" FORCE)
set (HDF4_LIBS ${HDF4_LIBS} CACHE STRING "HDF 4 libraries" FORCE)

if (NCDF4INC)
    set (NETCDF_INCLUDES ${NCDF4INC})
    set (NETCDF_LIBS "-L${NCDF4LIB} -lnetcdf")
else ()
    pkg_check_modules(NETCDF netcdf)
    if (NETCDF_FOUND)
        set(NETCDF_INCLUDES ${NETCDF_INCLUDE_DIRS})
        set(NETCDF_LIBS ${NETCDF_LDFLAGS})
    else ()
        set (NETCDF_INCLUDES $ENV{NCDF4INC})
        set (NETCDF_LIBS "-L$ENV{NCDF4LIB} -lnetcdf")
    endif ()
endif ()
set (NETCDF_INCLUDES ${NETCDF_INCLUDES} CACHE PATH "NetCDF header file path"
     FORCE)
set (NETCDF_LIBS ${NETCDF_LIBS} CACHE STRING "NetCDF libraries" FORCE)

if (TIFFINC)
    set (TIFF_INCLUDES ${TIFFINC})
    set (TIFF_LIBS "-L${TIFFLIB} -ltiff -ljpeg -lz -lm")    
elseif (DEFINED ENV{TIFFINC})
    set (TIFF_INCLUDES $ENV{TIFFINC})
    set (TIFF_LIBS "-L$ENV{TIFFLIB} -ltiff -ljpeg -lz -lm")
else ()
    find_package (TIFF)
    if (TIFF_FOUND)
        set (TIFF_INCLUDES ${TIFF_INCLUDE_DIRS})
        set (TIFF_LIBS ${TIFF_LIBRARIES})
    endif ()
endif ()
set (TIFF_INCLUDES ${TIFF_INCLUDES} CACHE PATH "TIFF header file path" FORCE)
set (TIFF_LIBS ${TIFF_LIBS} CACHE STRING "TIFF libraries" FORCE)

if (GEOTIFF_INC)
    set (GEOTIFF_INCLUDES ${GEOTIFF_INC})
else ()
    set (GEOTIFF_INCLUDES $ENV{GEOTIFF_INC})
endif ()
if (GEOTIFF_LIB)
    set (GEOTIFF_LIBS "-L${GEOTIFF_LIB} -lgeotiff")
else ()
    set (GEOTIFF_LIBS "-L$ENV{GEOTIFF_LIB} -lgeotiff")
endif ()
set (GEOTIFF_INCLUDES ${GEOTIFF_INCLUDES}
     CACHE PATH "geoTIFF header file path" FORCE)
set (GEOTIFF_LIBS ${GEOTIFF_LIBS} CACHE STRING "geoTIFF libraries" FORCE)

add_subdirectory(raw_binary)
add_subdirectory(py_modules)
add_subdirectory(schema)
